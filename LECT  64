1.ZIG ZAG TRANSVERSAL
class Solution{
    public:
    //Function to store the zig zag order traversal of tree in a list.
    vector <int> zigZagTraversal(Node* root)
    {
    	// Code here
    	vector<int>result;
    	if(root==NULL)
    	return result;
    	queue<Node*>q;
    	q.push(root);
    	bool lefttoright=true;
    	while(!q.empty()){
    	    int size=q.size();
    	    vector<int>ans(size);
    	    for(int i=0;i<size;i++){
    	        Node*front=q.front();
    	        q.pop();
    	        int index=lefttoright?i:size-i-1;
    	        ans[index]=front->data;
    	        if(front->left)
    	        q.push(front->left);
    	        if(front->right)
    	        q.push(front->right);
    	    }
    	
    	        lefttoright=!lefttoright;
    	        for(auto i:ans){
    	            result.push_back(i);
    	        }
    	}
    	        return result;
    	}
};
ques 2 -Boundary traversal
}; */

class Solution {
public:
void traverseleft(Node*root, vector<int>& ans){
    if((root==NULL)||(root->left==NULL)&&(root->right==NULL))
    return ;
    ans.push_back(root->data);
    if(root->left)
    traverseleft(root->left,ans);
    else
    traverseleft(root->right,ans);
}
//leaf nodeNod
void traverseleaf(Node*root, vector<int>&ans){
    if (root==NULL)
    return ;
    if((root->left==NULL)&&(root->right==NULL))
    ans.push_back(root->data);
    traverseleaf(root->left,ans);
    traverseleaf(root->right,ans);
}
//right part
void traverseright(Node*root, vector<int>&ans){
     if((root==NULL)||(root->left==NULL)&&(root->right==NULL))
    return ;
    if(root->right)
    traverseright(root->right,ans);
    else
    traverseright(root->left,ans);
    ans.push_back(root->data);
}

    
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int>ans;
        if(root==NULL)
        return ans;
        ans.push_back(root->data);
        traverseleft(root->left,ans);
        traverseleaf(root->left,ans);
        traverseleaf(root->right,ans);
        traverseright(root->right,ans);
        return ans;
    }
};
