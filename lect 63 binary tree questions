 ques 1Height and  depth of tree
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
*/
main code
class Solution{
    public:
    //Function to find the height of a binary tree.
    int height(struct Node* node){
        if(node==NULL){
        return 0;
        }
        // code here 
        int left=height(node->left);
        int right=height(node->right);
        int ans =max(left,right)+1;
        return ans;
    }
};
2.Diameter of tree
Approach 1 -time complexity 0(n);
class Solution {
    private:
    int height(struct Node* node){
        if(node==NULL){
        return 0;
        }
        // code here 
        int left=height(node->left);
        int right=height(node->right);
        int ans =max(left,right)+1;
        return ans;
    }
  public:
  
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
        if(root==NULL){
            return 0;
        }
        int op1 =diameter(root->left);
        int op2 =diameter(root->right);
        int op3 =height(root->left)+1+height(root->right);
        // Your code here
        int ans2 = max(op1,max(op2,op3));
        return ans2;
    }
};
approach 2

class Solution {

  public:
  pair<int,int>diameterfast(Node*root){
      if(root==NULL){
          pair<int,int>p=make_pair(0,0);
          return p;
      }
      pair<int,int>left=diameterfast(root->left);
      pair<int,int>right=diameterfast(root->right);
      int op1=left.first;
      int op2=right.first;
      int op3=left.second+right.second+1;
      pair<int,int>ans;
      ans.first=max(op1,max(op2,op3));
      ans.second=max(left.second,right.second)+1;
      return ans;
  }
   int diameter(Node* root) {
    return diameterfast(root).first;
    }
};
